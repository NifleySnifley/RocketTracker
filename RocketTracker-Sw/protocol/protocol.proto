syntax = "proto2";

message GPS {
  required double lat = 1;        // Latitude in degrees North
  required double lon = 2;        // Longitude in degrees West
  required double alt = 3;        // Altitude in meters above SEA LEVEL
  required uint32 utc_time = 4;   // UTC time in NMEA hhmmsssss as an int
  optional uint32 sats_used = 5;  // Satellites used for fix
  optional uint32 fix_status = 6; // NMEA fix status (0-6)
}

message Battery {
  required float battery_voltage = 1;
  required float percentage = 3;
//  required bool charging = 2;
}

message Raw { required bytes data = 1; }

message Altitude {
  required float alt_m = 1;
  optional float v_speed = 2;
}

message Orientation {
  required float orientation_x = 1;
  required float orientation_y = 2;
  required float orientation_z = 3;
}

enum AlertType {
  ALT_Apogee = 0;  // Reached apogee
  ALT_LowBatt = 1; // Battery < 50%
  ALT_Landed = 2;  // No major movement for 30 secs
  ALT_Liftoff = 3; // Large forward accel detected
  ALT_Log50 = 4;   // Log memory 50% full warning (IDEA: Maybe have it reduce
                   // logging speed as it fills? inversely slower?)
  ALT_LogFull = 5; // Log full, logging stopped!

  ALT_Error = 128; // Internal tracker error, error code specified in data
}

message Alert {
  required AlertType type = 1;
  optional uint32 data = 2;
}

message RadioRxStatus {
  required float RSSI = 1;
  required float SNR = 2;
  required bool crc_valid = 3;
}

// Info (telemetry)
// Status
// Cmd
// Resp
enum DatumTypeID {
  // Telemetry
  INFO_Blank = 0;
  INFO_Raw = 1;
  INFO_Battery = 2;
  INFO_GPS = 3;
  INFO_Altitude = 4;
  INFO_Orientation = 5;
  INFO_Alert = 6;

  // Receiver
  STATUS_RadioRxStatus = 64;

  // Commands & Responses
  CMD_Ping = 128;
  RESP_Ping = 129;

  CMD_StartLog = 130;
  RESP_StartLog = 131;

  CMD_StopLog = 132;
  RESP_StopLog = 133;
}

message Command_Ping {
  required uint32 data = 1;
}

message Resp_Ping {
  required uint32 data = 1;
}